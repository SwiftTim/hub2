"use client"

import { Button } from "@/components/ui/button"
import { Download, Loader2 } from "lucide-react"
import { useState } from "react"
import jsPDF from "jspdf"
import "jspdf-autotable"

interface jsPDFWithAutoTable extends jsPDF {
  autoTable: (options: any) => jsPDF
}

interface Unit {
  id: string
  unit_code: string
  unit_name: string
}

interface GenerateReportButtonProps {
  reportType: string
  units: Unit[]
  user: any
}

export function GenerateReportButton({ reportType, units, user }: GenerateReportButtonProps) {
  const [isGenerating, setIsGenerating] = useState(false)

  const addWatermark = (doc: jsPDFWithAutoTable, text: string) => {
    const pageCount = doc.internal.getNumberOfPages()

    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i)

      // Add visible watermark
      doc.setFontSize(8)
      doc.setTextColor(200, 200, 200)
      doc.text(`Generated: ${new Date().toISOString()}`, 14, doc.internal.pageSize.height - 20)
      doc.text(`Lecturer: ${user.email}`, 14, doc.internal.pageSize.height - 15)
      doc.text(
        `Report ID: ${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        14,
        doc.internal.pageSize.height - 10,
      )

      // Add diagonal watermark
      doc.saveGraphicsState()
      doc.setGState(new doc.GState({ opacity: 0.1 }))
      doc.setFontSize(50)
      doc.setTextColor(128, 128, 128)

      const pageWidth = doc.internal.pageSize.width
      const pageHeight = doc.internal.pageSize.height

      doc.text("OFFICIAL ACADEMIC REPORT", pageWidth / 2, pageHeight / 2, {
        angle: 45,
        align: "center",
      })

      doc.restoreGraphicsState()
    }
  }

  const generateStudentPerformanceReport = async () => {
    const doc = new jsPDF() as jsPDFWithAutoTable

    // Header
    doc.setFontSize(20)
    doc.text("Student Performance Report", 14, 22)
    doc.setFontSize(12)
    doc.text(`Generated by: ${user.email}`, 14, 32)
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 14, 40)

    // Summary section
    doc.setFontSize(16)
    doc.text("Executive Summary", 14, 55)
    doc.setFontSize(11)
    doc.text("This report provides a comprehensive analysis of student performance across all units.", 14, 65)

    // Units table
    doc.autoTable({
      startY: 80,
      head: [["Unit Code", "Unit Name", "Enrolled Students", "Avg Performance"]],
      body: units.map((unit) => [
        unit.unit_code,
        unit.unit_name,
        "N/A", // Would be populated with real data
        "N/A",
      ]),
    })

    addWatermark(doc, "STUDENT_PERFORMANCE")
    return doc
  }

  const generateUnitAnalyticsReport = async () => {
    const doc = new jsPDF() as jsPDFWithAutoTable

    doc.setFontSize(20)
    doc.text("Unit Analytics Report", 14, 22)
    doc.setFontSize(12)
    doc.text(`Generated by: ${user.email}`, 14, 32)
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 14, 40)

    doc.setFontSize(16)
    doc.text("Unit Performance Metrics", 14, 55)

    doc.autoTable({
      startY: 70,
      head: [["Unit", "Enrollments", "Assignments", "Assessments", "Resources", "Engagement"]],
      body: units.map((unit) => [`${unit.unit_code} - ${unit.unit_name}`, "0", "0", "0", "0", "0%"]),
    })

    addWatermark(doc, "UNIT_ANALYTICS")
    return doc
  }

  const generateEngagementReport = async () => {
    const doc = new jsPDF() as jsPDFWithAutoTable

    doc.setFontSize(20)
    doc.text("Student Engagement Summary", 14, 22)
    doc.setFontSize(12)
    doc.text(`Generated by: ${user.email}`, 14, 32)
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 14, 40)

    doc.setFontSize(16)
    doc.text("Engagement Metrics", 14, 55)
    doc.setFontSize(11)
    doc.text("Analysis of student participation across all academic activities.", 14, 65)

    doc.autoTable({
      startY: 80,
      head: [["Metric", "Total", "This Week", "Trend"]],
      body: [
        ["Group Messages", "0", "0", "→"],
        ["Resource Downloads", "0", "0", "→"],
        ["Assignment Submissions", "0", "0", "→"],
        ["Assessment Attempts", "0", "0", "→"],
      ],
    })

    addWatermark(doc, "ENGAGEMENT_SUMMARY")
    return doc
  }

  const generateAssessmentAnalysis = async () => {
    const doc = new jsPDF() as jsPDFWithAutoTable

    doc.setFontSize(20)
    doc.text("Assessment Analysis Report", 14, 22)
    doc.setFontSize(12)
    doc.text(`Generated by: ${user.email}`, 14, 32)
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 14, 40)

    doc.setFontSize(16)
    doc.text("Security & Performance Analysis", 14, 55)
    doc.setFontSize(11)
    doc.text("Comprehensive analysis of assessment security metrics and student performance.", 14, 65)

    doc.autoTable({
      startY: 80,
      head: [["Assessment", "Attempts", "Avg Score", "Security Flags", "Completion Rate"]],
      body: [["No assessments found", "-", "-", "-", "-"]],
    })

    addWatermark(doc, "ASSESSMENT_ANALYSIS")
    return doc
  }

  const handleGenerate = async () => {
    setIsGenerating(true)

    try {
      let doc: jsPDFWithAutoTable

      switch (reportType) {
        case "student-performance":
          doc = await generateStudentPerformanceReport()
          break
        case "unit-analytics":
          doc = await generateUnitAnalyticsReport()
          break
        case "engagement-summary":
          doc = await generateEngagementReport()
          break
        case "assessment-analysis":
          doc = await generateAssessmentAnalysis()
          break
        default:
          throw new Error("Unknown report type")
      }

      const fileName = `${reportType}-report-${new Date().toISOString().split("T")[0]}.pdf`
      doc.save(fileName)
    } catch (error) {
      console.error("Error generating report:", error)
      alert("Failed to generate report. Please try again.")
    } finally {
      setIsGenerating(false)
    }
  }

  const getReportTitle = () => {
    switch (reportType) {
      case "student-performance":
        return "Student Performance"
      case "unit-analytics":
        return "Unit Analytics"
      case "engagement-summary":
        return "Engagement Summary"
      case "assessment-analysis":
        return "Assessment Analysis"
      default:
        return "Report"
    }
  }

  return (
    <Button onClick={handleGenerate} disabled={isGenerating || units.length === 0}>
      {isGenerating ? (
        <>
          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          Generating...
        </>
      ) : (
        <>
          <Download className="mr-2 h-4 w-4" />
          Generate {getReportTitle()}
        </>
      )}
    </Button>
  )
}
